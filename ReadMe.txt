The database is an Azure SQL database jetcakedb on a server petkog. Entity Framework is used to map model to database tables. ASP.NET Core is used for creating the back-end controller endpoints for CRUD. React and Redux are used for client-side visualisation. There are 2 tables - one for users and one for images - each user stores an imageId reference to his image in the images table. The application interface is straightfoward. Initially a user is unauthorized and is presented with home screen and navigation menu with 2 options: Login presents a validated form to enter login credentials, Register is a validated form for registering new user. To register, a user must enter all form fields, validation is as per: username and email must not be present in database, password should be at least 6 characters long, email should be in correct format, phone number should be in correct format and contain at least 10 digits, profile image must be in correct format. Upon submitting the register form, a request to the server is made, where if valid the user and his profile image are stored in the relational database. The user can now log in the application using the Login NavLink or the /login route. Once valid credentials are entered, a JWT token is generated on the server side, validated on the client-side and stored in the browser for further authorization. The /profile route is a protected route and requires a token. Upon refreshing the UI, token is also validated to see if it's correct and decide which NavLinks to be present. Once authorized, user interface changes with the Links Logout and Profile. Logout clears the token and other user information and changes the Links to Login and Register. The Profile section can be accessed once a user is authorized. There he can see his current profile information and change it according the implemented validation for registration. Redux is used to implement SPA behavior.